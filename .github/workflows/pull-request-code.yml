name: PR Code Checks

on:
  pull_request:
    branches:
      - main
      - master
    types:
      - opened
      - synchronize

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.4.3
        with:
          version: latest

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=build-${{ hashFiles('pyproject.toml', 'uv.lock') }}-${{ runner.os }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: ./scripts/setup.sh

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            .uv
          key: ${{ steps.cache-key.outputs.value }}

      - name: Run linting
        run: ./scripts/lint.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.4.3
        with:
          version: latest

      - name: Install dependencies
        run: ./scripts/setup.sh

      - name: Build Lambda package
        run: ./scripts/build.sh

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=build-${{ hashFiles('pyproject.toml', 'uv.lock') }}-${{ runner.os }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .venv
            .uv
            dist
          key: ${{ steps.cache-key.outputs.value }}

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.4.3
        with:
          version: latest

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            .uv
            dist
          key: ${{ needs.build.outputs.cache-key }}

      - name: Run unit tests
        run: ./scripts/unit-test.sh

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6.4.3
        with:
          version: latest

      - name: Restore dependencies and build cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            .uv
            dist
          key: ${{ needs.build.outputs.cache-key }}

      - name: Start Lambda container
        run: ./scripts/local-instance.sh start

      - name: Run integration tests
        run: ./scripts/integration-test.sh

      - name: Stop Lambda container
        if: always()
        run: ./scripts/local-instance.sh stop
