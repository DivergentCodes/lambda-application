[project]
name = "lambda-application"
description = "Lambda application code, decoupled from lambda-infrastructure"
dynamic = ["version"]
requires-python = ">=3.11"
readme = "README.md"

dependencies = [
]

[dependency-groups]
dev = [
  "pytest>=8.3",
  "pytest-cov>=6.2",
  "python-semantic-release>=10.3.1",
  "requests>=2.32.4",
  "ruff>=0.12",
  "setuptools-scm>=8.3.1",
]

[tool.pytest.ini_options]
testpaths = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.ruff]
# Exclude test files from linting
exclude = [
    "tests/",
    "**/test_*.py",
    "**/*_test.py",
    "**/tests.py",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/test_*.py",
    "*/_test.py",
    "*/tests/*",
    "*_test.py",
    "test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if self.debug:",
    "if settings.DEBUG",
    "pragma: no cover",
]

# Decide next SemVer, create the tag, create the GitHub release
[tool.semantic_release]
version_source = "tag"
tag_format = "v{version}"
# Handled by separate CI job.
upload_to_vcs_release = false

# Use tag to set __version__/project version for build artifact
[tool.setuptools_scm]
tag_regex = "v?(?P<version>\\d+\\.\\d+\\.\\d+.*)"
